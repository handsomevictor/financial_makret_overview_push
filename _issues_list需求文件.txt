一些需要注意的问题
1. 时间，尤其是地域，可以用pytz然后给一些地区的选择，让大家选
2. 数据来源，首批cover的应该有
    - 1. 美股，A股，英股，加密货币，原油和天然气，外汇
加几列特征，是否为中概股，是否是大票等

美股下载数据的时候，采用多个来源，如果yfinance不行，则改为datareader，并且给我发送邮件，把logging写到正文

3. 如果input的时间内是某个地区的某个市场正在交易，则自动忽略该市场
4. 需要加上使用的是local还是cloud，关系到时区
5. 之后加上业绩报告和真实对比
6. 尝试添加ML
7. 尝试加入财报数据
8. 尝试加入基础的策略，并且做回测，画图等
9. Overview中，加入行业板块涨跌幅，还有总体市场涨跌的分布
    加入众多市场，在结束的时候直接处理数据，然后如果preference写了true则代表希望在每个市场结束时即收到消息，反正可以选择很多很多种信息
    加一个feature, 这个股，涨幅排名位置（0到1之间）
    加个feature，overview里面，画个图，分布的图
    增设overview异常波动值，超过最近60天波动率1.96，95%以外的波动的股票

    美股还得专门列出中概股单独为一列
    加上中国的一些基金和国外的etf吧，主要靠爬虫来获取，推送的时候加上数据来源

9.5
可以用：import pandas_datareader as web
web.get_quote_yahoo('tsla')的marketState来判断美股现在开盘了没！！！

10. 关于时间：先确定一下，各个时间和utc时间差异一直是一致的！确保虚拟机一直是用的utc时间！
    定义一个now (utc) 然后再转成纽约，再判断是否当天市场结束，在crontab里每小时的第1分钟就执行一次，执行完有数据的话，就在当前文件
    夹里创建一个文件，之后判断一下这个文件是否存在就可以表明是否已经执行过了，如果文件中的数据很多是空的，则再执行一遍，执行5遍还是空的，就输出数据源出错

11. （一种办法，不推荐）程序周末也执行，做一个判断即可，如果是周末，则time.sleep()
12. 将所有市场的ticker名单下载下来，用try以防万一，并且如果出问题，给我发邮件
13. 最后循环执行的main里面，加入try，并且任何一个有问题的都给我发送邮件
14. 想一下如何按照market cap排序，每个都看info太慢了！
15. 散列值判断文件
以后更多的功能要经常加入try和isinstance经常做判断！

16. Overview中添加新闻头条：Top news选择一些网站去爬虫一下，当作overview正文，只要标题
17. Subscription的人可以自己选哪些市场，也可以选择推送消息的时间！
18. 投资组合理论，去寻找最好的组合，每天跑一次
19. 做功能集合的时候，class里面放多种执行的信息，但在介绍的时候不要放上传到storage的！然后在加上一个user=admin的选项，有了这个，就执行上传，
    然后将secret.json存放在虚拟机单独的文件夹里，手动上传到vm上
20. 投融资信息
21. dividend的信息可以从这里看：https://pandas-datareader.readthedocs.io/en/latest/remote_data.html#naver-finance-data，最后一行
22. 一定要比较财务数据，用yfinance.info来做！ yf.Ticker(ticker).info() 这里有非常多的财务数据！


在commit的时候，一定要把temp for convenience给删掉，不然linux就不下载数据了！第一次一定要下载的！

实时需求：
1. 加入crypto价格过量变化的提醒，还有美股什么的实时提醒



!!总体逻辑：
所有数据放到Google Storage里面，代码每天定几个时间去执行，然后每个市场结束之后，把数据做一个分析，存储起来，然后在推送的时候，直接推送这部分的数据即可！


对于不同的市场，每次运行的结果都储存到当前文件夹里，然后用单独的一个dir作为处理数据的py文件，然后统一获取数据然后处理。

搜索一下python如何定时发送！

将我的google secret加密！不然太蠢了！用一些算法加密吧





印度市场：https://blog.quantinsti.com/stock-market-data-analysis-python/




残留问题：
1. 处理US市场时，只做了common tickers的！没有合理的自动切换！详见：data_source.data_source_total的us_common_tickers函数
